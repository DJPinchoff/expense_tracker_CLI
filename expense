#! /usr/bin/env ruby
require 'pry'
require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect( dbname: 'expenses' )
    setup_schema
  end

  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables
           WHERE table_schema = 'public' AND table_name = 'expenses';"
    if @connection.exec(sql).getvalue(0, 0) == "0"
      sql = "CREATE TABLE expenses (
        id serial PRIMARY KEY,
        amount numeric(6, 2) NOT NULL CHECK (amount > 0),
        memo text NOT NULL,
        created_on date NOT NULL
        )"
      @connection.exec(sql)
    end
  end

  def list_expenses
    sql = "SELECT * FROM expenses ORDER BY created_on"
    result = @connection.exec(sql)
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def display_count(result)
    num = result.ntuples
    num = num == 0 ? "no" : num
    puts num == 1 ? "There is 1 expense." : "There are #{num} expenses."
  end

  def add_expense(amount, memo)
    sql = "INSERT INTO expenses(amount, memo, created_on)
          VALUES($1, $2, NOW())"
    @connection.exec_params( sql, [amount, memo]).values
  end

  def search(query)
    sql = "SELECT *
           FROM expenses
           WHERE memo
           ILIKE $1"
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def display_expenses(expenses)
    expenses.each do |row|
      values = [ row['id'].rjust(3),
                 row['created_on'].rjust(10),
                 row['amount'].rjust(8),
                 row['memo'] ]

      puts values.join(' | ')
    end

    puts "-" * 50
    sum = expenses_sum
    puts "Total #{sum.to_s.rjust(21)}"
  end

  def expenses_sum
    sql = "SELECT SUM(amount) FROM expenses"
    @connection.exec(sql).getvalue(0, 0)
  end

  def delete(id)
    unless id_exists?(id)
      puts "There is no expense with the id '#{id}'."
      return
    end

    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, ["#{id}"])
    puts "The following expense has been deleted:"
    display_expenses(result)

    sql = "DELETE FROM expenses WHERE id = $1"
    @connection.exec_params(sql, [id])
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  def id_exists?(id)
    sql = "SELECT id FROM expenses"
    result = @connection.exec(sql)
    result.column_values(0).include?(id)
  end
end

class CLI
  def initialize
    @expense_data = ExpenseData.new
  end

  def run(argv)
    command = argv.first
    case command
      when "list"
        @expense_data.list_expenses
      when "add"
        amount = argv[1]
        memo = argv[2]
        if amount && memo
          @expense_data.add_expense(amount, memo)
        else
          puts "You must provide an amount and memo."
        end
      when "search"
        query = argv[1]
        @expense_data.search(query) if query
      when "delete"
        index = argv[1]
        @expense_data.delete(index) if index
      when "clear"
        puts "This will remove all expenses. Are you sure? (y/n)"
        input = $stdin.getch
        @expense_data.delete_all_expenses if input == 'y'
      else
        display_help
    end
  end

  private

  def display_help
    help = <<~INFO
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    INFO
    puts help
  end
end

CLI.new.run(ARGV)
